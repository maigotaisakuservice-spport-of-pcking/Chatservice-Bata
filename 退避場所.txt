// 画像フォームのsubmitイベントで画像送信
document.getElementById("image-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const file = document.getElementById("image-input").files[0];
  if (!file || !currentChatId || !currentUser) {
    alert("画像かチャット対象が見つかりません");
    return;
  }

  try {
    const base64 = await compressImageToTargetSize(file, 30 * 1024); // 30KB以下
    const messagesRef = ref(db, `chats/${currentChatId}/messages`);
    await push(messagesRef, {
      type: "image",
      imageDataUrl: base64,
      sender: currentUser.uid,
      timestamp: Date.now()
    });

    alert("画像を送信しました！");
    document.getElementById("image-input").value = "";
  } catch (err) {
    console.error("送信失敗:", err);
    alert("画像送信に失敗しました。");
  }
});

// 圧縮関数（非同期）
async function compressImageToTargetSize(file, maxBase64Size = 30 * 1024) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");

        const maxDim = 800;
        let width = img.width;
        let height = img.height;

        if (width > height && width > maxDim) {
          height = Math.round((height * maxDim) / width);
          width = maxDim;
        } else if (height > width && height > maxDim) {
          width = Math.round((width * maxDim) / height);
          height = maxDim;
        }

        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(img, 0, 0, width, height);

        let quality = 0.92;

        function tryCompress() {
          const dataUrl = canvas.toDataURL("image/jpeg", quality);
          const base64Length = dataUrl.length - "data:image/jpeg;base64,".length;
          const sizeInBytes = 4 * Math.ceil(base64Length / 3) * 0.75;

          if (sizeInBytes <= maxBase64Size || quality <= 0.4) {
            resolve(dataUrl);
          } else {
            quality -= 0.05;
            tryCompress();
          }
        }

        tryCompress();
      };
      img.onerror = () => reject("画像読み込みエラー");
      img.src = reader.result;
    };
    reader.onerror = () => reject("ファイル読み込みエラー");
    reader.readAsDataURL(file);
  });
}




//chat画面に画像表示スクリプト
if (message.type === "image" && message.imageDataUrl) {
  const img = document.createElement("img");
  img.src = message.imageDataUrl;
  img.loading = "lazy";
  img.alt = "画像メッセージ";
  img.style.maxWidth = "150px";
  img.style.maxHeight = "150px";
  img.style.cursor = "pointer";
  img.onclick = () => openImageModal(message.imageDataUrl);
  div.appendChild(img);
} else {
    div.textContent = `${message.sender === currentUser.uid ? "あなた" : "相手"}: ${message.text || ""}`;
  }

  messagesDiv.appendChild(div);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}
//クリックで画像拡大表示スクリプト
function openImageModal(dataUrl) {
  const modal = document.getElementById("image-modal");
  const img = document.getElementById("modal-image");
  img.src = dataUrl;
  modal.style.display = "flex";
}

// モーダルクリックで閉じる
document.getElementById("image-modal").addEventListener("click", () => {
  document.getElementById("image-modal").style.display = "none";
});

function displayMessage(message) {
  const messagesDiv = document.getElementById("messages");
  const div = document.createElement("div");

  if (message.type === "image" && message.imageDataUrl) {
    // 画像処理（省略）
  } else if (message.type === "video" && message.videoUrl) {
    const video = document.createElement("video");
    video.src = message.videoUrl;
    video.controls = true;
    video.style.maxWidth = "200px";
    video.style.maxHeight = "150px";
    div.appendChild(video);
  } else {
    div.textContent = `${message.sender === currentUser.uid ? "あなた" : "相手"}: ${message.text || ""}`;
  }

  messagesDiv.appendChild(div);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}
